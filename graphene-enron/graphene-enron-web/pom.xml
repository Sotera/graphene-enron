<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>graphene-enron</groupId>
		<artifactId>graphene-enron</artifactId>
		<version>4.0.9-SNAPSHOT</version>
	</parent>
	<artifactId>graphene-enron-web</artifactId>
	<packaging>war</packaging>
	<description>Web module (war) for Enron demo</description>
	<dependencies>



		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>



		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-rest</artifactId>
			<type>jar</type>
		</dependency>
		<!-- Here's the war overlay -->
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-web</artifactId>
			<type>war</type>
		</dependency>
		<!-- Here's just the classes, needed for compilation -->
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-web</artifactId>
			<classifier>classes</classifier>
			<type>jar</type>
		</dependency>
		<dependency>
			<artifactId>graphene-model</artifactId>
			<groupId>${base.project.groupId}</groupId>
		</dependency>
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-dao</artifactId>
		</dependency>
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-search</artifactId>
		</dependency>
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-util</artifactId>
		</dependency>
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-memorydb</artifactId>
		</dependency>
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-dao-sql</artifactId>
		</dependency>
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-dao-neo4j</artifactId>
		</dependency>
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-model</artifactId>
		</dependency>
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-dao</artifactId>
		</dependency>
		<dependency>
			<groupId>${base.project.groupId}</groupId>
			<artifactId>graphene-export</artifactId>
			<type>jar</type>
		</dependency>

	</dependencies>
	<repositories>
		<!-- This repository is only needed when the Tapestry version is a preview 
			release, rather than a final release. -->
		<repository>
			<id>apache-staging</id>
			<url>https://repository.apache.org/content/groups/staging/</url>
		</repository>
	</repositories>
	<build>
		<finalName>graphene-enron-web</finalName>
		<resources>
			<resource><!-- This is for picking up any Tapestry .tml templates, .properties 
					or other resources which are in the src directory. Optionally these could 
					be in the corresponding resources directory but we don't enforce that on 
					developers. -->
				<directory>src/main/java</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.*</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
					<exclude>**/*.class</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/filtered-resources</directory>
				<targetPath>filtered</targetPath>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<workDirectory>target\overlay-war-folder</workDirectory>
					<webXml>src\main\webapp\WEB-INF\web.xml</webXml>

					<overlays>
						<overlay>
							<groupId>${base.project.groupId}</groupId>
							<artifactId>graphene-web</artifactId>
							<excludes>
								<exclude>**/log4j.properties</exclude>
								<exclude>WEB-INF/lib/*.jar</exclude>
							</excludes>
						</overlay>
					</overlays>
					<!-- If true, this will package the classes as their own jar, INSIDE 
						the war's web-inf/lib. At the moment this seems incompatible with the attachClasses 
						flag, which we absolutely need for building. -->
					<archiveClasses>false</archiveClasses>
					<attachClasses>true</attachClasses>
					<!-- Just to be explicit. 'classes' is the default. This makes a second 
						target as a jar with just the classes and no html/js -->
					<classesClassifier>classes</classesClassifier>
				</configuration>
			</plugin>
			<!-- Run the application using "mvn jetty:run" -->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	<reporting></reporting>


</project>